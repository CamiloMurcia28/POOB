#BlueJ class context
comment0.target=Colony
comment0.text=\r\n\ The\ Colony\ class\r\n\ @author\ \ Jeisson\ Casallas\ &\ Camilo\ Murcia\r\n\ @version\ 1.0\r\n
comment1.params=
comment1.target=Colony()
comment1.text=\r\n\ Constructor\ de\ la\ clase\ Colony\r\n
comment10.params=file
comment10.target=void\ export(java.io.File)
comment10.text=\r\n\ Exporta\ datos\ a\ un\ archivo.\r\n\r\n\ @param\ file\ Archivo\ al\ cual\ se\ van\ a\ exportar\ los\ datos.\r\n\ @throws\ ColonyException\ Si\ ocurre\ un\ error\ al\ exportar\ a\ archivo.\r\n
comment11.params=file
comment11.target=Colony\ open00(java.io.File)
comment11.text=\r\n\ Abre\ un\ archivo.\r\n\r\n\ @param\ file\ Archivo\ que\ se\ va\ a\ abrir.\r\n\ @return\ Colony\ retorna\ la\ colonia\ que\ se\ desea\ abrir.\r\n\ @throws\ ColonyException\ Si\ ocurre\ un\ error\ al\ abrir\ el\ archivo.\r\n\ \r\n
comment12.params=file
comment12.target=void\ save00(java.io.File)
comment12.text=\r\n\ Guarda\ un\ archivo.\r\n\r\n\ @param\ file\ Archivo\ que\ se\ va\ a\ guardar.\r\n\ @throws\ ColonyException\ Si\ ocurre\ un\ error\ al\ guardar\ el\ archivo.\r\n
comment13.params=file
comment13.target=void\ import00(java.io.File)
comment13.text=\r\n\ Importa\ datos\ desde\ un\ archivo.\r\n\r\n\ @param\ file\ Archivo\ del\ cual\ se\ van\ a\ importar\ los\ datos.\r\n\ @throws\ ColonyException\ Si\ ocurre\ un\ error\ al\ importar\ desde\ el\ archivo.\r\n
comment14.params=entityType\ posX\ posY
comment14.target=Entity\ createEntity(java.lang.String,\ int,\ int)
comment15.params=file
comment15.target=void\ export00(java.io.File)
comment15.text=\r\n\ Exporta\ datos\ a\ un\ archivo.\r\n\r\n\ @param\ file\ Archivo\ al\ cual\ se\ van\ a\ exportar\ los\ datos.\r\n\ @throws\ ColonyException\ Si\ ocurre\ un\ error\ al\ exportar\ a\ archivo.\r\n
comment16.params=file
comment16.target=Colony\ open01(java.io.File)
comment16.text=\r\n\ Abre\ un\ archivo.\r\n\r\n\ @param\ file\ Archivo\ que\ se\ va\ a\ abrir.\r\n\ @return\ Colony\ retorna\ la\ colonia\ que\ se\ desea\ abrir.\r\n\ @throws\ ColonyException\ Si\ ocurre\ un\ error\ al\ abrir\ el\ archivo.\r\n\ \r\n
comment17.params=file
comment17.target=void\ save01(java.io.File)
comment17.text=\r\n\ Guarda\ un\ archivo.\r\n\r\n\ @param\ file\ Archivo\ que\ se\ va\ a\ guardar.\r\n\ @throws\ ColonyException\ Si\ ocurre\ un\ error\ al\ guardar\ el\ archivo.\r\n
comment18.params=file
comment18.target=void\ import01(java.io.File)
comment18.text=\r\n\ Importa\ datos\ desde\ un\ archivo.\r\n\r\n\ @param\ file\ Archivo\ del\ cual\ se\ van\ a\ importar\ los\ datos.\r\n\ @throws\ ColonyException\ Si\ ocurre\ un\ error\ al\ importar\ desde\ el\ archivo.\r\n
comment19.params=file
comment19.target=void\ export01(java.io.File)
comment19.text=\r\n\ \r\n\ Exporta\ datos\ a\ un\ archivo.\r\n\r\n\ @param\ file\ Archivo\ al\ cual\ se\ van\ a\ exportar\ los\ datos.\r\n\ @throws\ ColonyException\ Si\ ocurre\ un\ error\ al\ exportar\ a\ archivo.\r\n
comment2.params=
comment2.target=int\ getLength()
comment2.text=\r\n\ Nos\ da\ la\ longitud\ del\ tablero\r\n\ @return\ valor\ entero\ del\ tama\u00F1o\r\n
comment20.params=file
comment20.target=void\ import02(java.io.File)
comment20.text=\r\n\ Importa\ datos\ desde\ un\ archivo.\r\n\r\n\ @param\ file\ Archivo\ del\ cual\ se\ van\ a\ importar\ los\ datos.\r\n\ @throws\ ColonyException\ Si\ ocurre\ un\ error\ al\ importar\ desde\ el\ archivo.\r\n
comment21.params=line\ lineNumber\ errorWriter
comment21.target=void\ processLine(java.lang.String,\ int,\ java.io.BufferedWriter)
comment21.text=\r\n\ Procesa\ una\ l\u00EDnea\ del\ archivo,\ dividi\u00E9ndola\ en\ partes\ y\ realizando\ validaciones.\r\n\r\n\ @param\ line\ \ \ \ \ \ \ \ La\ l\u00EDnea\ a\ procesar.\r\n\ @param\ lineNumber\ \ El\ n\u00FAmero\ de\ l\u00EDnea\ actual.\r\n\ @param\ errorWriter\ El\ escritor\ para\ mensajes\ de\ error.\r\n\ @throws\ IOException\ Si\ ocurre\ un\ error\ de\ escritura.\r\n
comment22.params=entityType\ posX\ posY\ lineNumber\ errorWriter
comment22.target=void\ validateAndSetEntity(java.lang.String,\ int,\ int,\ int,\ java.io.BufferedWriter)
comment22.text=\r\n\ Valida\ las\ coordenadas\ y\ configura\ una\ entidad\ si\ es\ v\u00E1lida.\r\n\r\n\ @param\ entityType\ \ \ El\ tipo\ de\ entidad.\r\n\ @param\ posX\ \ \ \ \ \ \ \ \ La\ coordenada\ X.\r\n\ @param\ posY\ \ \ \ \ \ \ \ \ La\ coordenada\ Y.\r\n\ @param\ lineNumber\ \ \ El\ n\u00FAmero\ de\ l\u00EDnea\ actual.\r\n\ @param\ errorWriter\ \ El\ escritor\ para\ mensajes\ de\ error.\r\n\ @throws\ IOException\ Si\ ocurre\ un\ error\ de\ escritura.\r\n
comment23.params=errorWriter\ lineNumber\ errorMessage
comment23.target=void\ writeError(java.io.BufferedWriter,\ int,\ java.lang.String)
comment23.text=\r\n\ Escribe\ un\ mensaje\ de\ error\ en\ el\ archivo\ de\ errores\ y\ marca\ la\ existencia\ de\ errores.\r\n\r\n\ @param\ errorWriter\ \ El\ escritor\ para\ mensajes\ de\ error.\r\n\ @param\ lineNumber\ \ \ El\ n\u00FAmero\ de\ l\u00EDnea\ actual.\r\n\ @param\ errorMessage\ El\ mensaje\ de\ error\ a\ escribir.\r\n\ @throws\ IOException\ Si\ ocurre\ un\ error\ de\ escritura.\r\n
comment24.params=file
comment24.target=void\ export02(java.io.File)
comment24.text=\r\n\ \r\n\ Exporta\ datos\ a\ un\ archivo.\r\n\r\n\ @param\ file\ Archivo\ al\ cual\ se\ van\ a\ exportar\ los\ datos.\r\n\ @throws\ ColonyException\ Si\ ocurre\ un\ error\ al\ exportar\ a\ archivo.\r\n
comment25.params=entityType\ posX\ posY
comment25.target=Entity\ createEntity2(java.lang.String,\ int,\ int)
comment25.text=\r\n\ Crea\ una\ entidad\ seg\u00FAn\ el\ tipo\ y\ posici\u00F3n\ especificados.\r\n\r\n\ @param\ entityType\ Tipo\ de\ entidad.\r\n\ @param\ posX\ Posici\u00F3n\ X.\r\n\ @param\ posY\ Posici\u00F3n\ Y.\r\n\ @return\ La\ entidad\ creada,\ o\ null\ si\ hay\ un\ error.\r\n
comment26.params=file
comment26.target=void\ export03(java.io.File)
comment26.text=\r\n\ \r\n\ Exporta\ datos\ a\ un\ archivo.\r\n\r\n\ @param\ file\ Archivo\ al\ cual\ se\ van\ a\ exportar\ los\ datos.\r\n\ @throws\ ColonyException\ Si\ ocurre\ un\ error\ al\ exportar\ a\ archivo.\r\n
comment27.params=file
comment27.target=void\ import03(java.io.File)
comment27.text=\r\n\ Importa\ datos\ desde\ un\ archivo.\r\n\r\n\ @param\ file\ Archivo\ del\ cual\ se\ van\ a\ importar\ los\ datos.\r\n\ @throws\ ColonyException\ Si\ ocurre\ un\ error\ al\ importar\ desde\ el\ archivo.\r\n
comment28.params=line\ lineNumber\ errorWriter
comment28.target=void\ processLine2(java.lang.String,\ int,\ java.io.BufferedWriter)
comment28.text=\r\n\ Procesa\ una\ l\u00EDnea\ del\ archivo,\ dividi\u00E9ndola\ en\ partes\ y\ realizando\ validaciones.\r\n\r\n\ @param\ line\ \ \ \ \ \ \ \ La\ l\u00EDnea\ a\ procesar.\r\n\ @param\ lineNumber\ \ El\ n\u00FAmero\ de\ l\u00EDnea\ actual.\r\n\ @param\ errorWriter\ El\ escritor\ para\ mensajes\ de\ error.\r\n\ @throws\ IOException\ Si\ ocurre\ un\ error\ de\ escritura.\r\n
comment29.params=entityType\ posX\ posY\ lineNumber\ errorWriter
comment29.target=void\ validateAndSetEntity2(java.lang.String,\ int,\ int,\ int,\ java.io.BufferedWriter)
comment29.text=\r\n\ Valida\ las\ coordenadas\ y\ configura\ una\ entidad\ si\ es\ v\u00E1lida.\r\n\r\n\ @param\ entityType\ \ \ El\ tipo\ de\ entidad.\r\n\ @param\ posX\ \ \ \ \ \ \ \ \ La\ coordenada\ X.\r\n\ @param\ posY\ \ \ \ \ \ \ \ \ La\ coordenada\ Y.\r\n\ @param\ lineNumber\ \ \ El\ n\u00FAmero\ de\ l\u00EDnea\ actual.\r\n\ @param\ errorWriter\ \ El\ escritor\ para\ mensajes\ de\ error.\r\n\ @throws\ IOException\ Si\ ocurre\ un\ error\ de\ escritura.\r\n
comment3.params=r\ c
comment3.target=Entity\ getEntity(int,\ int)
comment3.text=\r\n\ Verifica\ si\ hay\ una\ entidad\ en\ la\ posici\u00F3n\ especificada\r\n\ \r\n\ @return\ retorna\ un\ tipo\ entidad.\r\n
comment30.params=errorWriter\ lineNumber\ errorMessage
comment30.target=void\ writeError2(java.io.BufferedWriter,\ int,\ java.lang.String)
comment30.text=\r\n\ Escribe\ un\ mensaje\ de\ error\ en\ el\ archivo\ de\ errores\ y\ marca\ la\ existencia\ de\ errores.\r\n\r\n\ @param\ errorWriter\ \ El\ escritor\ para\ mensajes\ de\ error.\r\n\ @param\ lineNumber\ \ \ El\ n\u00FAmero\ de\ l\u00EDnea\ actual.\r\n\ @param\ errorMessage\ El\ mensaje\ de\ error\ a\ escribir.\r\n\ @throws\ IOException\ Si\ ocurre\ un\ error\ de\ escritura.\r\n
comment4.params=r\ c\ e
comment4.target=void\ setEntity(int,\ int,\ Entity)
comment5.params=
comment5.target=void\ someEntities()
comment5.text=\r\n\ Permite\ agregar\ entidades\ al\ tablero\r\n
comment6.params=
comment6.target=void\ ticTac()
comment6.text=\r\n\ Le\ da\ la\ funcionalidad\ al\ Bot\u00F3n\ de\ la\ interfaz\ a\ partir\ del\ cual\ se\ realizan\ acciones\r\n
comment7.params=file
comment7.target=Colony\ open(java.io.File)
comment7.text=\r\n\ Abre\ un\ archivo.\r\n\r\n\ @param\ file\ Archivo\ que\ se\ va\ a\ abrir.\r\n\ @throws\ ColonyException\ Si\ ocurre\ un\ error\ al\ abrir\ el\ archivo.\r\n
comment8.params=file
comment8.target=void\ save(java.io.File)
comment8.text=\r\n\ Guarda\ un\ archivo.\r\n\r\n\ @param\ file\ Archivo\ que\ se\ va\ a\ guardar.\r\n\ @throws\ ColonyException\ Si\ ocurre\ un\ error\ al\ guardar\ el\ archivo.\r\n
comment9.params=file
comment9.target=void\ importA(java.io.File)
comment9.text=\r\n\ Importa\ datos\ desde\ un\ archivo.\r\n\r\n\ @param\ file\ Archivo\ del\ cual\ se\ van\ a\ importar\ los\ datos.\r\n\ @throws\ ColonyException\ Si\ ocurre\ un\ error\ al\ importar\ desde\ el\ archivo.\r\n
numComments=31
