#BlueJ class context
comment0.target=Tensor
comment1.params=shape\ value
comment1.target=Tensor(int[],\ int)
comment1.text=\r\n\ Crea\ un\ Tensor\ con\ una\ forma\ dada\ y\ un\ solo\ valor\ incial\r\n\ @param\ shape\ da\ forma\ al\ tensor\ representado\ como\ un\ arreglo\ de\ enteros\ dada\ su\ dimensi\u00F3n\r\n\ @param\ value\ le\ da\ un\ valor\ al\ tensor\ con\ el\ cual\ se\ inicializa\r\n
comment10.params=shape1\ shape2
comment10.target=void\ validateShapeEquality(int[],\ int[])
comment10.text=\r\n\ Valida\ que\ dos\ arreglos\ sean\ iguales\r\n\ @param\ shape1\ forma\ del\ primer\ tensor.\ \r\n\ @param\ shape2\ forma\ del\ segundo\ tensor.\r\n
comment11.params=tensor\ level
comment11.target=java.lang.String\ buildString(Tensor,\ int)
comment11.text=\r\n\ Construye\ recursivamente\ una\ representacion\ de\ la\ cadena\ de\ un\ tensor\r\n\ @param\ tensor\ el\ tensor\ el\ cual\ va\ a\ ser\ representado\ como\ string\r\n\ @param\ level\ nivel\ de\ recursion\r\n\ @return\ retorna\ la\ representacion\ del\ tensor\ como\ un\ string\r\n
comment12.params=shape
comment12.target=int\ calculateSize(int[])
comment12.text=\r\n\ Calcula\ el\ total\ de\ elementos\ del\ tensor\ basado\ en\ la\ forma\r\n\ @param\ shape\ arreglo\ que\ da\ la\ forma\ del\ tensor\ a\ partir\ del\ cual\ se\ toman\ las\ dimensiones\r\n\ @return\ retorna\ numero\ todal\ de\ elementos\ del\ tensor.\r\n
comment13.params=index
comment13.target=int\ calculateFlatIndex(int[])
comment13.text=\r\n\ Calcula\ un\ indice\ plano\ a\ partir\ de\ un\ indice\ multidimensional\ basado\ en\ la\ forma\ del\ tensor\r\n\ @param\ index\ posici\u00F3n\ del\ arreglo\ multidimensional\ la\ cual\ queremos\ verificar\r\n\ @return\ retorna\ el\ valor\ de\ la\ posicion\ del\ arreglo\ multidimensional\ la\ cual\ queremos\ verificar\r\n
comment14.params=
comment14.target=int[]\ getShape()
comment14.text=\r\n\ obtiene\ la\ forma\ del\ tensor\r\n\ @return\ retorna\ el\ arreglo\ de\ enteros\ que\ representa\ la\ forma\ del\ tensor\r\n
comment15.params=
comment15.target=int[]\ getValues()
comment15.text=\r\n\ obtiene\ los\ valores\ del\ tensor\r\n\ @return\ retorna\ el\ arreglo\ de\ enteros\ que\ representa\ los\ valores\ del\ tensor\r\n
comment2.params=shape\ values
comment2.target=Tensor(int[],\ int[])
comment2.text=\r\n\ Crea\ un\ Tensor\ con\ una\ forma\ dada\ y\ un\ solo\ valor\ incial\r\n\ @param\ shape\ da\ forma\ al\ tensor\ representado\ como\ un\ arreglo\ de\ enteros\ dada\ su\ dimensi\u00F3n\r\n\ @param\ values\ le\ da\ un\ arreglo\ de\ valores\ enteros\ al\ tensor\ con\ los\ cuales\ se\ inicializa\r\n
comment3.params=index
comment3.target=int\ value(int[])
comment3.text=\r\n\ Obtiene\ el\ valor\ de\ un\ elemento\ del\ tensor\ a\ partir\ de\ una\ posici\u00F3n\ indicada.\r\n\ @param\ index\ Posici\u00F3n\ dentro\ del\ tensor\ donde\ se\ tiene\ un\ valor\r\n\ @return\ Values\ Valor\ de\ la\ posici\u00F3n\ especificada\ del\ tensor.\r\n
comment4.params=newShape
comment4.target=Tensor\ reshape(int[])
comment4.text=\r\n\ Cambia\ la\ forma\ de\ un\ tensor\ a\ una\ nueva.\r\n\ @param\ newShape\ ingresa\ un\ arreglo\ de\ enteros\ el\ cual\ le\ da\ la\ nueva\ forma\ al\ tensor\r\n\ @return\ retorna\ el\ tensor\ con\ una\ nueva\ forma\r\n
comment5.params=t
comment5.target=Tensor\ add(Tensor)
comment5.text=\r\n\ Agrega\ un\ tensor\ al\ que\ ya\ tenemos\r\n\ @param\ t\ Nombre\ del\ tensor\ que\ sera\ agregado\r\n\ @return\ retorna\ el\ tensor\ con\ la\ suma\ de\ los\ elementos\ del\ tensor\ de\ entrada\r\n
comment6.params=other
comment6.target=boolean\ equals(Tensor)
comment6.text=\r\n\ Compara\ el\ tensor\ con\ otro\ tensor\ para\ ver\ si\ son\ iguales\r\n\ @param\ Ingresa\ otro\ tensor\ el\ cual\ va\ a\ ser\ comparado\ con\ el\ que\ se\ tiene\r\n\ @return\ retorna\ un\ booleano\ segun\ sean\ iguales\ o\ distintos\r\n
comment7.params=other
comment7.target=boolean\ equals(java.lang.Object)
comment7.text=\r\n\ Compara\ el\ tensor\ con\ otro\ objeto\ para\ determinar\ si\ son\ iguales\r\n\ @param\ ingresa\ un\ objeto\ el\ cual\ va\ a\ ser\ comparado\ con\ el\ tensor\r\n\ @return\ retorna\ un\ booleano\ segun\ sean\ iguales\ o\ distintos\r\n
comment8.params=
comment8.target=java.lang.String\ toString()
comment8.text=\r\n\ retorna\ el\ tensor\ como\ una\ representaci\u00F3n\ de\ un\ string\ \r\n@return\ retorna\ la\ representacion\ de\ tensor\ como\ un\ string\r\n
comment9.params=index
comment9.target=void\ validateIndex(int[])
comment9.text=\r\n\ Verifica\ el\ indice\ proporcionado\ para\ conocer\ si\ esta\ dentro\ de\ los\ limites\ del\ tensor\r\n\ @param\ index\ posici\u00F3n\ del\ arreglo\ la\ cual\ queremos\ verificar\r\n
numComments=16
