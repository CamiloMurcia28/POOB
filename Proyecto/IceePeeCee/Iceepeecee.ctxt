#BlueJ class context
comment0.target=Iceepeecee
comment0.text=\r\n\ @authors\:\ Jeisson\ Casallas\ &\ Camilo\ murcia\r\n\ @version\ 2.0\ 09/23/23\r\n
comment1.params=lengthSize\ widthSize
comment1.target=Iceepeecee(int,\ int)
comment1.text=\r\n\ Constructor\ de\ la\ clase\ Iceepeecee\r\n
comment10.params=color
comment10.target=int\ flightCamera(java.lang.String)
comment10.text=\r\n\ Consulta\ el\ angulo\ de\ la\ foto\ que\ toma\ un\ vuelo\r\n\ \r\n\ @param\ Color\ color\ del\ vuelo\ el\ cual\ queremos\ consultar\ el\ angulo\ de\ la\ foto\r\n\ @return\ retorna\ el\ valor\ del\ angulo\ de\ la\ foto\r\n
comment11.params=
comment11.target=void\ makeVisible()
comment11.text=\r\n\ Nos\ hace\ visible\ la\ isla.\r\n
comment12.params=
comment12.target=void\ makeInvisible()
comment12.text=\r\n\ Nos\ hace\ invisible\ la\ isla.\r\n
comment13.params=
comment13.target=void\ finish()
comment13.text=\r\n\ Termina\ el\ simulador\r\n\ \r\n
comment14.params=
comment14.target=boolean\ ok()
comment14.text=\r\n\ Verifica\ que\ el\ ultimo\ metodo\ se\ halla\ ejecutado\ con\ exito\r\n
comment15.params=islands\ flights
comment15.target=Iceepeecee(int[][][],\ int[][][])
comment15.text=\r\nConstructor\ de\ la\ clase\ Iceepecee\ que\ crea\ el\ tablero\ con\ las\ islas\ y\ los\ vuelos\ ingresados\ \r\n\r\n@param\ islands\ arreglo\ de\ matrices\ donde\ se\ van\ a\ ingresar\ las\ islas\ que\ queremos\ que\ tenga\ nuestro\ tablero\r\n@param\ flights\ arreglo\ de\ matrices\ donde\ se\ van\ a\ ingresar\ los\ vuelos\ que\ queremos\ que\ tenga\ nuestro\ tablero\r\n
comment16.params=
comment16.target=java.lang.String\ getRandomColor()
comment16.text=\r\n\ Metodo\ para\ obtener\ un\ color\ random\ \r\n\ @return\ String,\ color\ random\ de\ un\ arreglo;\r\n
comment17.params=teta
comment17.target=void\ photograph(float)
comment17.text=\r\n\ Toma\ una\ fotografia\ desde\ todos\ los\ vuelos\ que\ se\ encuentren\ activos\ con\ un\ angulo\ especificado\r\n\ \r\n\ @param\ teta\ angulo\ de\ apertura\ de\ tipo\ flotante\ que\ va\ a\ tener\ la\ foto\r\n
comment18.params=
comment18.target=java.lang.String[]\ islands()
comment18.text=\r\n\ Consulta\ las\ islas\ que\ se\ encuentran\ en\ Iceepeecee\r\n\ \r\n\ @return\ retorna\ un\ arreglo\ con\ las\ islas\ que\ se\ encuentran\ en\ el\ tablero\r\n
comment19.params=
comment19.target=java.lang.String[]\ flights()
comment19.text=\r\n\ Consulta\ los\ vuelos\ que\ se\ encuentran\ en\ Iceepeecee\r\n\ @return\ retorna\ un\ arreglo\ con\ los\ vuelos\ que\ se\ encuentran\ en\ el\ tablero\r\n
comment2.params=color\ polygon
comment2.target=void\ addIsland(java.lang.String,\ int[][])
comment2.text=\r\n\ Nos\ crea\ una\ isla\ con\ un\ color\ dado\ y\ unas\ coordenadas\ dadas\r\n\ \r\n\ @param\ color\ ingresa\ un\ color\ tipo\ string\r\n\ @param\ polygon\ ingresa\ una\ matriz\ con\ coordenadas\ x,y\ que\ crear\ el\ poligono\r\n
comment20.params=
comment20.target=java.lang.String[]\ observedIslands()
comment20.text=\r\n\ Consulta\ las\ islas\ registradas\ en\ las\ fotografias\r\n@return\ retorna\ un\ arreglo\ con\ las\ islas\ que\ han\ sido\ registradas\ en\ la\ fotografia\r\n
comment21.params=
comment21.target=java.lang.String[]\ uselessFlights()
comment21.text=\r\n\ Consulta\ los\ vuelos\ que\ han\ tomado\ una\ fotografia\ inutil\r\n\ \r\n\ @return\ retorna\ un\ arreglo\ con\ los\ vuelos\ que\ no\ han\ fotografiado\ ninguna\ isla\ en\ su\ totalidad\r\n
comment3.params=color\ from\ to
comment3.target=void\ addFlight(java.lang.String,\ int[],\ int[])
comment3.text=\r\n\ Nos\ agrega\ un\ vuelo\ con\ un\ color,\ unas\ coordenadas\ de\ donde\ inicia\ y\ donde\ termina\ \r\n\ \r\n\ @param\ color\ color\ que\ va\ a\ tener\ nuestro\ vuelo\r\n\ @param\ from\ coordenada\ donde\ inicia\ el\ vuelo\ dada\ como\ arreglo\r\n\ @param\ to\ coordenada\ donde\ termina\ el\ vuelo\ dada\ como\ arreglo\ \r\n
comment4.params=flightColor\ teta
comment4.target=void\ photograph(java.lang.String,\ int)
comment4.text=\r\n\ Toma\ una\ fotografia\ de\ un\ vuelo\ con\ el\ color\ y\ angulo\ especificado\r\n\ \r\n\ @param\ flightColor\ color\ del\ vuelo\ desde\ el\ cual\ toma\ la\ foto\r\n\ @param\ teta\ angulo\ de\ apertura\ que\ va\ a\ tener\ la\ foto\r\n
comment5.params=teta
comment5.target=void\ photograph(int)
comment5.text=\r\n\ Toma\ una\ fotografia\ desde\ todos\ los\ vuelos\ que\ se\ encuentren\ activos\ con\ un\ angulo\ especificado\r\n\ \r\n\ @param\ teta\ angulo\ de\ apertura\ que\ va\ a\ tener\ la\ foto\r\n
comment6.params=color
comment6.target=void\ delIsland(java.lang.String)
comment6.text=\r\n\ Nos\ elimina\ una\ isla\ creada\ a\ partir\ de\ su\ color\r\n\ \r\n\ @param\ color\ ingresa\ un\ color\ tipo\ string\ segun\ la\ isla\ que\ se\ quiere\ borrar\r\n
comment7.params=color
comment7.target=void\ delFlight(java.lang.String)
comment7.text=\r\n\ Nos\ elimina\ un\ vuelo\ de\ los\ que\ se\ encuentran\ en\ el\ tablero\r\n\ \r\n\ @param\ color\ Es\ el\ color\ del\ vuelo\ que\ deseamos\ eliminar\r\n
comment8.params=is
comment8.target=int[][]\ islandLocation(java.lang.String)
comment8.text=\r\n\ Nos\ arroja\ las\ coordenadas\ de\ la\ isla\ del\ color\ indicado\r\n\ \r\n\ @param\ is\ isla\ que\ queremos\ conocer\ sus\ coordenadas\ a\ partir\ de\ su\ color\r\n\ @return\ nos\ retorna\ una\ matriz\ con\ las\ coordenadas\ que\ tiene\ nuestra\ isla\r\n
comment9.params=fl
comment9.target=int[][]\ flightLocation(java.lang.String)
comment9.text=\r\n\ Nos\ da\ las\ coordenadas\ de\ inicio\ y\ final\ de\ nuestro\ vuelo\ a\ partir\ del\ color\r\n\r\n@param\ fl\ Vuelo\ que\ queremos\ eliminar\ identificado\ por\ su\ color\ \r\n@return\ Matriz\ que\ contiene\ las\ coordenadas\ de\ inicio\ y\ fin\ de\ nuestro\ vuelo\r\n
numComments=22
